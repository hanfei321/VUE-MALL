define(["./defaultValue-bcb5baf7","./DeveloperError-b273b01a","./Check-f9a1a1be","./Math-588d98f6","./Cartesian2-10213add","./Rectangle-de996bfb","./Transforms-2b063051","./Matrix4-c981b715","./RuntimeError-1b5fbc4d","./WebGLConstants-667a4a5e","./ComponentDatatype-ec1abf38","./GeometryAttribute-49fe2445","./when-ae2a7552","./buildModuleUrl-cd6b3599","./GeometryAttributes-a8cf4ac9","./IndexDatatype-523f50d6","./IntersectionTests-cc1722b0","./Plane-bb97f210","./VertexFormat-15410d3c","./arrayRemoveDuplicates-f05ed775","./ArcType-90391c26","./EllipsoidRhumbLine-b25fd372","./EllipsoidGeodesic-8f6c0327","./PolylinePipeline-74d8353e","./Color-7f022f58"],function(Y,e,t,q,z,y,J,r,a,o,j,K,n,i,Q,X,l,s,m,Z,$,p,c,ee,te){"use strict";var re=[];function f(e){var t=(e=Y.defaultValue(e,Y.defaultValue.EMPTY_OBJECT)).positions,r=e.colors,a=Y.defaultValue(e.width,1),o=Y.defaultValue(e.colorsPerVertex,!1);this._positions=t,this._colors=r,this._width=a,this._colorsPerVertex=o,this._vertexFormat=m.VertexFormat.clone(Y.defaultValue(e.vertexFormat,m.VertexFormat.DEFAULT)),this._arcType=Y.defaultValue(e.arcType,$.ArcType.GEODESIC),this._granularity=Y.defaultValue(e.granularity,q.CesiumMath.RADIANS_PER_DEGREE),this._ellipsoid=y.Ellipsoid.clone(Y.defaultValue(e.ellipsoid,y.Ellipsoid.WGS84)),this._workerName="createPolylineGeometry";t=1+t.length*z.Cartesian3.packedLength;t+=Y.defined(r)?1+r.length*te.Color.packedLength:1,this.packedLength=t+y.Ellipsoid.packedLength+m.VertexFormat.packedLength+4}f.pack=function(e,t,r){var a;r=Y.defaultValue(r,0);var o=e._positions,n=o.length;for(t[r++]=n,a=0;a<n;++a,r+=z.Cartesian3.packedLength)z.Cartesian3.pack(o[a],t,r);var i=e._colors,n=Y.defined(i)?i.length:0;for(t[r++]=n,a=0;a<n;++a,r+=te.Color.packedLength)te.Color.pack(i[a],t,r);return y.Ellipsoid.pack(e._ellipsoid,t,r),r+=y.Ellipsoid.packedLength,m.VertexFormat.pack(e._vertexFormat,t,r),r+=m.VertexFormat.packedLength,t[r++]=e._width,t[r++]=e._colorsPerVertex?1:0,t[r++]=e._arcType,t[r]=e._granularity,t};var h=y.Ellipsoid.clone(y.Ellipsoid.UNIT_SPHERE),C=new m.VertexFormat,v={positions:void 0,colors:void 0,ellipsoid:h,vertexFormat:C,width:void 0,colorsPerVertex:void 0,arcType:void 0,granularity:void 0};f.unpack=function(e,t,r){t=Y.defaultValue(t,0);for(var a=e[t++],o=new Array(a),n=0;n<a;++n,t+=z.Cartesian3.packedLength)o[n]=z.Cartesian3.unpack(e,t);var i=0<(a=e[t++])?new Array(a):void 0;for(n=0;n<a;++n,t+=te.Color.packedLength)i[n]=te.Color.unpack(e,t);var l=y.Ellipsoid.unpack(e,t,h);t+=y.Ellipsoid.packedLength;var s=m.VertexFormat.unpack(e,t,C);t+=m.VertexFormat.packedLength;var p=e[t++],c=1===e[t++],d=e[t++],u=e[t];return Y.defined(r)?(r._positions=o,r._colors=i,r._ellipsoid=y.Ellipsoid.clone(l,r._ellipsoid),r._vertexFormat=m.VertexFormat.clone(s,r._vertexFormat),r._width=p,r._colorsPerVertex=c,r._arcType=d,r._granularity=u,r):(v.positions=o,v.colors=i,v.width=p,v.colorsPerVertex=c,v.arcType=d,v.granularity=u,new f(v))};var ae=new z.Cartesian3,oe=new z.Cartesian3,ne=new z.Cartesian3,ie=new z.Cartesian3;return f.createGeometry=function(e){var t=e._width,r=e._vertexFormat,a=e._colors,o=e._colorsPerVertex,n=e._arcType,i=e._granularity,l=e._ellipsoid,s=Z.arrayRemoveDuplicates(e._positions,z.Cartesian3.equalsEpsilon),p=s.length;if(!(p<2||t<=0)){if(n===$.ArcType.GEODESIC||n===$.ArcType.RHUMB){var c,d=n===$.ArcType.GEODESIC?(c=q.CesiumMath.chordLength(i,l.maximumRadius),ee.PolylinePipeline.numberOfPoints):(c=i,ee.PolylinePipeline.numberOfPointsRhumbLine),u=ee.PolylinePipeline.extractHeights(s,l);if(Y.defined(a)){for(var y=1,m=0;m<p-1;++m)y+=d(s[m],s[m+1],c);var f=new Array(y),h=0;for(m=0;m<p-1;++m){var C=s[m],v=s[m+1],b=a[m],g=d(C,v,c);if(o&&m<y)for(var _=function(e,t,r){var a=re;a.length=r;var o=e.red,n=e.green,i=e.blue,l=e.alpha,s=t.red,p=t.green,c=t.blue,d=t.alpha;if(te.Color.equals(e,t)){for(h=0;h<r;h++)a[h]=te.Color.clone(e);return a}for(var u=(s-o)/r,y=(p-n)/r,m=(c-i)/r,f=(d-l)/r,h=0;h<r;h++)a[h]=new te.Color(o+h*u,n+h*y,i+h*m,l+h*f);return a}(b,a[m+1],g),A=_.length,E=0;E<A;++E)f[h++]=_[E];else for(E=0;E<g;++E)f[h++]=te.Color.clone(b)}f[h]=te.Color.clone(a[a.length-1]),a=f,re.length=0}s=n===$.ArcType.GEODESIC?ee.PolylinePipeline.generateCartesianArc({positions:s,minDistance:c,ellipsoid:l,height:u}):ee.PolylinePipeline.generateCartesianRhumbArc({positions:s,granularity:c,ellipsoid:l,height:u})}var P,w,x,l=4*(p=s.length)-4,T=new Float64Array(3*l),D=new Float64Array(3*l),k=new Float64Array(3*l),V=new Float32Array(2*l),L=r.st?new Float32Array(2*l):void 0,F=Y.defined(a)?new Uint8Array(4*l):void 0,G=0,R=0,O=0,I=0;for(E=0;E<p;++E){0===E?(P=ae,z.Cartesian3.subtract(s[0],s[1],P),z.Cartesian3.add(s[0],P,P)):P=s[E-1],z.Cartesian3.clone(P,ne),z.Cartesian3.clone(s[E],oe),E===p-1?(P=ae,z.Cartesian3.subtract(s[p-1],s[p-2],P),z.Cartesian3.add(s[p-1],P,P)):P=s[E+1],z.Cartesian3.clone(P,ie),Y.defined(F)&&(w=0===E||o?a[E]:a[E-1],E!==p-1&&(x=a[E]));for(var S=E===p-1?2:4,B=0===E?2:0;B<S;++B){z.Cartesian3.pack(oe,T,G),z.Cartesian3.pack(ne,D,G),z.Cartesian3.pack(ie,k,G),G+=3;var U=B-2<0?-1:1;V[R++]=B%2*2-1,V[R++]=U*t,r.st&&(L[O++]=E/(p-1),L[O++]=Math.max(V[R-2],0)),Y.defined(F)&&(U=B<2?w:x,F[I++]=te.Color.floatToByte(U.red),F[I++]=te.Color.floatToByte(U.green),F[I++]=te.Color.floatToByte(U.blue),F[I++]=te.Color.floatToByte(U.alpha))}}u=new Q.GeometryAttributes;u.position=new K.GeometryAttribute({componentDatatype:j.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:T}),u.prevPosition=new K.GeometryAttribute({componentDatatype:j.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:D}),u.nextPosition=new K.GeometryAttribute({componentDatatype:j.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:k}),u.expandAndWidth=new K.GeometryAttribute({componentDatatype:j.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:V}),r.st&&(u.st=new K.GeometryAttribute({componentDatatype:j.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:L})),Y.defined(F)&&(u.color=new K.GeometryAttribute({componentDatatype:j.ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:4,values:F,normalize:!0}));var M=X.IndexDatatype.createTypedArray(l,6*p-6),N=0,H=0,W=p-1;for(E=0;E<W;++E)M[H++]=N,M[H++]=N+2,M[H++]=N+1,M[H++]=N+1,M[H++]=N+2,M[H++]=N+3,N+=4;return new K.Geometry({attributes:u,indices:M,primitiveType:K.PrimitiveType.TRIANGLES,boundingSphere:J.BoundingSphere.fromPoints(s),geometryType:K.GeometryType.POLYLINES})}},function(e,t){return Y.defined(t)&&(e=f.unpack(e,t)),e._ellipsoid=y.Ellipsoid.clone(e._ellipsoid),f.createGeometry(e)}});
