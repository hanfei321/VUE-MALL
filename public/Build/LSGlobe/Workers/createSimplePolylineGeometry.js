define(["./defaultValue-bcb5baf7","./DeveloperError-b273b01a","./Check-f9a1a1be","./Math-588d98f6","./Cartesian2-10213add","./Rectangle-de996bfb","./Transforms-2b063051","./Matrix4-c981b715","./RuntimeError-1b5fbc4d","./WebGLConstants-667a4a5e","./ComponentDatatype-ec1abf38","./GeometryAttribute-49fe2445","./when-ae2a7552","./buildModuleUrl-cd6b3599","./GeometryAttributes-a8cf4ac9","./IndexDatatype-523f50d6","./IntersectionTests-cc1722b0","./Plane-bb97f210","./ArcType-90391c26","./EllipsoidRhumbLine-b25fd372","./EllipsoidGeodesic-8f6c0327","./PolylinePipeline-74d8353e","./Color-7f022f58"],function(L,e,o,V,x,f,R,r,t,a,S,I,l,i,O,M,n,s,U,p,d,N,F){"use strict";function c(e){var o=(e=L.defaultValue(e,L.defaultValue.EMPTY_OBJECT)).positions,r=e.colors,t=L.defaultValue(e.colorsPerVertex,!1);this._positions=o,this._colors=r,this._colorsPerVertex=t,this._arcType=L.defaultValue(e.arcType,U.ArcType.GEODESIC),this._granularity=L.defaultValue(e.granularity,V.CesiumMath.RADIANS_PER_DEGREE),this._ellipsoid=L.defaultValue(e.ellipsoid,f.Ellipsoid.WGS84),this._workerName="createSimplePolylineGeometry";o=1+o.length*x.Cartesian3.packedLength;o+=L.defined(r)?1+r.length*F.Color.packedLength:1,this.packedLength=o+f.Ellipsoid.packedLength+3}c.pack=function(e,o,r){var t;r=L.defaultValue(r,0);var a=e._positions,l=a.length;for(o[r++]=l,t=0;t<l;++t,r+=x.Cartesian3.packedLength)x.Cartesian3.pack(a[t],o,r);var i=e._colors,l=L.defined(i)?i.length:0;for(o[r++]=l,t=0;t<l;++t,r+=F.Color.packedLength)F.Color.pack(i[t],o,r);return f.Ellipsoid.pack(e._ellipsoid,o,r),r+=f.Ellipsoid.packedLength,o[r++]=e._colorsPerVertex?1:0,o[r++]=e._arcType,o[r]=e._granularity,o},c.unpack=function(e,o,r){o=L.defaultValue(o,0);for(var t=e[o++],a=new Array(t),l=0;l<t;++l,o+=x.Cartesian3.packedLength)a[l]=x.Cartesian3.unpack(e,o);var i=0<(t=e[o++])?new Array(t):void 0;for(l=0;l<t;++l,o+=F.Color.packedLength)i[l]=F.Color.unpack(e,o);var n=f.Ellipsoid.unpack(e,o);o+=f.Ellipsoid.packedLength;var s=1===e[o++],p=e[o++],d=e[o];return L.defined(r)?(r._positions=a,r._colors=i,r._ellipsoid=n,r._colorsPerVertex=s,r._arcType=p,r._granularity=d,r):new c({positions:a,colors:i,ellipsoid:n,colorsPerVertex:s,arcType:p,granularity:d})};var H=new Array(2),W=new Array(2),Y={positions:H,height:W,ellipsoid:void 0,minDistance:void 0,granularity:void 0};return c.createGeometry=function(e){var o,r,t,a=e._positions,l=e._colors,i=e._colorsPerVertex,n=e._arcType,s=e._granularity,e=e._ellipsoid,p=V.CesiumMath.chordLength(s,e.maximumRadius),d=L.defined(l)&&!i,f=a.length,c=0;if(n===U.ArcType.GEODESIC||n===U.ArcType.RHUMB){var y,u,h=n===U.ArcType.GEODESIC?(y=V.CesiumMath.chordLength(s,e.maximumRadius),u=N.PolylinePipeline.numberOfPoints,N.PolylinePipeline.generateArc):(y=s,u=N.PolylinePipeline.numberOfPointsRhumbLine,N.PolylinePipeline.generateRhumbArc),C=N.PolylinePipeline.extractHeights(a,e),g=Y;if(n===U.ArcType.GEODESIC?g.minDistance=p:g.granularity=s,g.ellipsoid=e,d){for(var T=0,b=0;b<f-1;b++)T+=u(a[b],a[b+1],y)+1;o=new Float64Array(3*T),t=new Uint8Array(4*T),g.positions=H,g.height=W;var m=0;for(b=0;b<f-1;++b){H[0]=a[b],H[1]=a[b+1],W[0]=C[b],W[1]=C[b+1];var v=h(g);if(L.defined(l))for(var P=v.length/3,_=l[b],B=0;B<P;++B)t[m++]=F.Color.floatToByte(_.red),t[m++]=F.Color.floatToByte(_.green),t[m++]=F.Color.floatToByte(_.blue),t[m++]=F.Color.floatToByte(_.alpha);o.set(v,c),c+=v.length}}else if(g.positions=a,g.height=C,o=new Float64Array(h(g)),L.defined(l)){for(t=new Uint8Array(o.length/3*4),b=0;b<f-1;++b)c=function(e,o,r,t,a,l,i){var n=N.PolylinePipeline.numberOfPoints(e,o,a),s=r.red,p=r.green,d=r.blue,f=r.alpha,c=t.red,e=t.green,o=t.blue,a=t.alpha;if(F.Color.equals(r,t)){for(T=0;T<n;T++)l[i++]=F.Color.floatToByte(s),l[i++]=F.Color.floatToByte(p),l[i++]=F.Color.floatToByte(d),l[i++]=F.Color.floatToByte(f);return i}for(var y=(c-s)/n,u=(e-p)/n,h=(o-d)/n,C=(a-f)/n,g=i,T=0;T<n;T++)l[g++]=F.Color.floatToByte(s+T*y),l[g++]=F.Color.floatToByte(p+T*u),l[g++]=F.Color.floatToByte(d+T*h),l[g++]=F.Color.floatToByte(f+T*C);return g}(a[b],a[b+1],l[b],l[b+1],p,t,c);var E=l[f-1];t[c++]=F.Color.floatToByte(E.red),t[c++]=F.Color.floatToByte(E.green),t[c++]=F.Color.floatToByte(E.blue),t[c++]=F.Color.floatToByte(E.alpha)}}else{r=d?2*f-2:f,o=new Float64Array(3*r),t=L.defined(l)?new Uint8Array(4*r):void 0;var A=0,k=0;for(b=0;b<f;++b){var D=a[b];if(d&&0<b&&(x.Cartesian3.pack(D,o,A),A+=3,_=l[b-1],t[k++]=F.Color.floatToByte(_.red),t[k++]=F.Color.floatToByte(_.green),t[k++]=F.Color.floatToByte(_.blue),t[k++]=F.Color.floatToByte(_.alpha)),d&&b===f-1)break;x.Cartesian3.pack(D,o,A),A+=3,L.defined(l)&&(_=l[b],t[k++]=F.Color.floatToByte(_.red),t[k++]=F.Color.floatToByte(_.green),t[k++]=F.Color.floatToByte(_.blue),t[k++]=F.Color.floatToByte(_.alpha))}}e=new O.GeometryAttributes;e.position=new I.GeometryAttribute({componentDatatype:S.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:o}),L.defined(l)&&(e.color=new I.GeometryAttribute({componentDatatype:S.ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:4,values:t,normalize:!0}));var E=2*((r=o.length/3)-1),G=M.IndexDatatype.createTypedArray(r,E),w=0;for(b=0;b<r-1;++b)G[w++]=b,G[w++]=b+1;return new I.Geometry({attributes:e,indices:G,primitiveType:I.PrimitiveType.LINES,boundingSphere:R.BoundingSphere.fromPoints(a)})},function(e,o){return L.defined(o)&&(e=c.unpack(e,o)),e._ellipsoid=f.Ellipsoid.clone(e._ellipsoid),c.createGeometry(e)}});
