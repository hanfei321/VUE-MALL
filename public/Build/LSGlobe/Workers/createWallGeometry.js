define(["./defaultValue-bcb5baf7","./DeveloperError-b273b01a","./Check-f9a1a1be","./Math-588d98f6","./Cartesian2-10213add","./Rectangle-de996bfb","./Transforms-2b063051","./Matrix4-c981b715","./RuntimeError-1b5fbc4d","./WebGLConstants-667a4a5e","./ComponentDatatype-ec1abf38","./GeometryAttribute-49fe2445","./when-ae2a7552","./buildModuleUrl-cd6b3599","./GeometryAttributes-a8cf4ac9","./IndexDatatype-523f50d6","./IntersectionTests-cc1722b0","./Plane-bb97f210","./VertexFormat-15410d3c","./arrayRemoveDuplicates-f05ed775","./EllipsoidRhumbLine-b25fd372","./EllipsoidGeodesic-8f6c0327","./PolylinePipeline-74d8353e","./WallGeometryLibrary-a4418e96"],function(N,e,t,W,B,d,U,a,i,r,q,J,n,o,Y,Z,s,m,p,l,u,c,f,j){"use strict";var K=new B.Cartesian3,Q=new B.Cartesian3,X=new B.Cartesian3,$=new B.Cartesian3,ee=new B.Cartesian3,te=new B.Cartesian3,ae=new B.Cartesian3;function y(e){var t=(e=N.defaultValue(e,N.defaultValue.EMPTY_OBJECT)).positions,a=e.maximumHeights,i=e.minimumHeights,r=N.defaultValue(e.vertexFormat,p.VertexFormat.DEFAULT),n=N.defaultValue(e.granularity,W.CesiumMath.RADIANS_PER_DEGREE),e=N.defaultValue(e.ellipsoid,d.Ellipsoid.WGS84);this._positions=t,this._minimumHeights=i,this._maximumHeights=a,this._vertexFormat=p.VertexFormat.clone(r),this._granularity=n,this._ellipsoid=d.Ellipsoid.clone(e),this._workerName="createWallGeometry";t=1+t.length*B.Cartesian3.packedLength+2;N.defined(i)&&(t+=i.length),N.defined(a)&&(t+=a.length),this.packedLength=t+d.Ellipsoid.packedLength+p.VertexFormat.packedLength+1}y.pack=function(e,t,a){var i;a=N.defaultValue(a,0);var r=e._positions,n=r.length;for(t[a++]=n,i=0;i<n;++i,a+=B.Cartesian3.packedLength)B.Cartesian3.pack(r[i],t,a);var o=e._minimumHeights,n=N.defined(o)?o.length:0;if(t[a++]=n,N.defined(o))for(i=0;i<n;++i)t[a++]=o[i];var s=e._maximumHeights;if(n=N.defined(s)?s.length:0,t[a++]=n,N.defined(s))for(i=0;i<n;++i)t[a++]=s[i];return d.Ellipsoid.pack(e._ellipsoid,t,a),a+=d.Ellipsoid.packedLength,p.VertexFormat.pack(e._vertexFormat,t,a),t[a+=p.VertexFormat.packedLength]=e._granularity,t};var g=d.Ellipsoid.clone(d.Ellipsoid.UNIT_SPHERE),h=new p.VertexFormat,b={positions:void 0,minimumHeights:void 0,maximumHeights:void 0,ellipsoid:g,vertexFormat:h,granularity:void 0};return y.unpack=function(e,t,a){t=N.defaultValue(t,0);for(var i,r,n=e[t++],o=new Array(n),s=0;s<n;++s,t+=B.Cartesian3.packedLength)o[s]=B.Cartesian3.unpack(e,t);if(0<(n=e[t++]))for(i=new Array(n),s=0;s<n;++s)i[s]=e[t++];if(0<(n=e[t++]))for(r=new Array(n),s=0;s<n;++s)r[s]=e[t++];var m=d.Ellipsoid.unpack(e,t,g);t+=d.Ellipsoid.packedLength;var l=p.VertexFormat.unpack(e,t,h),u=e[t+=p.VertexFormat.packedLength];return N.defined(a)?(a._positions=o,a._minimumHeights=i,a._maximumHeights=r,a._ellipsoid=d.Ellipsoid.clone(m,a._ellipsoid),a._vertexFormat=p.VertexFormat.clone(l,a._vertexFormat),a._granularity=u,a):(b.positions=o,b.minimumHeights=i,b.maximumHeights=r,b.granularity=u,new y(b))},y.fromConstantHeights=function(e){var t=(e=N.defaultValue(e,N.defaultValue.EMPTY_OBJECT)).positions,a=e.minimumHeight,i=e.maximumHeight,r=N.defined(a),n=N.defined(i);if(r||n)for(var o=t.length,s=r?new Array(o):void 0,m=n?new Array(o):void 0,l=0;l<o;++l)r&&(s[l]=a),n&&(m[l]=i);return new y({positions:t,maximumHeights:m,minimumHeights:s,ellipsoid:e.ellipsoid,vertexFormat:e.vertexFormat})},y.createGeometry=function(e){var t=e._positions,a=e._minimumHeights,i=e._maximumHeights,r=e._vertexFormat,n=e._granularity,o=e._ellipsoid,i=j.WallGeometryLibrary.computePositions(o,t,i,a,n,!0);if(N.defined(i)){var s=i.bottomPositions,m=i.topPositions,a=i.numCorners,l=m.length,n=2*l,u=r.position?new Float64Array(n):void 0,d=r.normal?new Float32Array(n):void 0,p=r.tangent?new Float32Array(n):void 0,c=r.bitangent?new Float32Array(n):void 0,f=r.st?new Float32Array(n/3*2):void 0,y=0,g=0,h=0,b=0,v=0,C=ae,x=te,A=ee,_=!0;l/=3;var E=0,w=[],F=0;if(r.st){for(O=0;O<l-1;++O){var L=3*O,k=3*(O+1),L=B.Cartesian3.fromArray(m,L,K),k=B.Cartesian3.fromArray(m,k,Q),k=B.Cartesian3.distance(L,k);w.push(k),F+=k}for(O=0;O<w.length;++O)w[O]/=F}for(O=0;O<l;++O){var V,H=3*O,D=B.Cartesian3.fromArray(m,H,K),G=B.Cartesian3.fromArray(s,H,Q);r.position&&(u[y++]=G.x,u[y++]=G.y,u[y++]=G.z,u[y++]=D.x,u[y++]=D.y,u[y++]=D.z),r.st&&(f[v++]=E,f[v++]=0,f[v++]=E,f[v++]=1),(r.normal||r.tangent||r.bitangent)&&(V=B.Cartesian3.clone(B.Cartesian3.ZERO,$),G=B.Cartesian3.subtract(D,o.geodeticSurfaceNormal(D,Q),Q),O+1<l&&(V=B.Cartesian3.fromArray(m,3+H,$)),_&&(H=B.Cartesian3.subtract(V,D,X),G=B.Cartesian3.subtract(G,D,K),C=B.Cartesian3.normalize(B.Cartesian3.cross(G,H,C),C),_=!1),B.Cartesian3.equalsEpsilon(D,V,W.CesiumMath.EPSILON10)?_=!0:(E+=w[O],r.tangent&&(x=B.Cartesian3.normalize(B.Cartesian3.subtract(V,D,x),x)),r.bitangent&&(A=B.Cartesian3.normalize(B.Cartesian3.cross(C,x,A),A))),r.normal&&(d[g++]=C.x,d[g++]=C.y,d[g++]=C.z,d[g++]=C.x,d[g++]=C.y,d[g++]=C.z),r.tangent&&(p[b++]=x.x,p[b++]=x.y,p[b++]=x.z,p[b++]=x.x,p[b++]=x.y,p[b++]=x.z),r.bitangent&&(c[h++]=A.x,c[h++]=A.y,c[h++]=A.z,c[h++]=A.x,c[h++]=A.y,c[h++]=A.z))}i=new Y.GeometryAttributes;r.position&&(i.position=new J.GeometryAttribute({componentDatatype:q.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:u})),r.normal&&(i.normal=new J.GeometryAttribute({componentDatatype:q.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:d})),r.tangent&&(i.tangent=new J.GeometryAttribute({componentDatatype:q.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:p})),r.bitangent&&(i.bitangent=new J.GeometryAttribute({componentDatatype:q.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:c})),r.st&&(i.st=new J.GeometryAttribute({componentDatatype:q.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:f}));var P=n/3;n-=6*(a+1);for(var T=Z.IndexDatatype.createTypedArray(P,n),z=0,O=0;O<P-2;O+=2){var R=O,S=O+2,I=B.Cartesian3.fromArray(u,3*R,K),M=B.Cartesian3.fromArray(u,3*S,Q);B.Cartesian3.equalsEpsilon(I,M,W.CesiumMath.EPSILON10)||(I=O+1,M=O+3,T[z++]=I,T[z++]=R,T[z++]=M,T[z++]=M,T[z++]=R,T[z++]=S)}return new J.Geometry({attributes:i,indices:T,primitiveType:J.PrimitiveType.TRIANGLES,boundingSphere:new U.BoundingSphere.fromVertices(u)})}},function(e,t){return N.defined(t)&&(e=y.unpack(e,t)),e._ellipsoid=d.Ellipsoid.clone(e._ellipsoid),y.createGeometry(e)}});
